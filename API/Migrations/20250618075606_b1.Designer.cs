// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(BackendDbContext))]
    [Migration("20250618075606_b1")]
    partial class b1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("API.Models.Booking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("bookingDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<double>("price")
                        .HasColumnType("REAL");

                    b.Property<int>("showingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("showingId");

                    b.HasIndex("userId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("API.Models.CinemaRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("seatsPerRow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("totalRows")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("cinemaRooms");
                });

            modelBuilder.Entity("API.Models.GuestBooking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("bookingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("guestEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("guestFirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("guestLastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<double>("price")
                        .HasColumnType("REAL");

                    b.Property<int>("showingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("showingId");

                    b.ToTable("guestBookings");
                });

            modelBuilder.Entity("API.Models.Movie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("director")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fsk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("posterUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("API.Models.Showing", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("basePrice")
                        .HasColumnType("REAL");

                    b.Property<int>("cinemaRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("is3D")
                        .HasColumnType("INTEGER");

                    b.Property<int>("movieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("movieId");

                    b.ToTable("showings");
                });

            modelBuilder.Entity("API.Models.ShowingSeat", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bookingid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuestBookingid")
                        .HasColumnType("INTEGER");

                    b.Property<double>("additionalPrice")
                        .HasColumnType("REAL");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("seatNumber")
                        .HasColumnType("INTEGER");

                    b.Property<char>("seatRow")
                        .HasColumnType("TEXT");

                    b.Property<int>("showingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Bookingid");

                    b.HasIndex("GuestBookingid");

                    b.HasIndex("showingId");

                    b.ToTable("seats");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("role")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("API.Models.Booking", b =>
                {
                    b.HasOne("API.Models.Showing", "showing")
                        .WithMany("bookings")
                        .HasForeignKey("showingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany("bookings")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("showing");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.GuestBooking", b =>
                {
                    b.HasOne("API.Models.Showing", "showing")
                        .WithMany()
                        .HasForeignKey("showingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("showing");
                });

            modelBuilder.Entity("API.Models.Showing", b =>
                {
                    b.HasOne("API.Models.CinemaRoom", "cinemaRoom")
                        .WithMany("showings")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Movie", "movie")
                        .WithMany("showings")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("API.Models.ShowingSeat", b =>
                {
                    b.HasOne("API.Models.Booking", null)
                        .WithMany("seats")
                        .HasForeignKey("Bookingid");

                    b.HasOne("API.Models.GuestBooking", null)
                        .WithMany("seats")
                        .HasForeignKey("GuestBookingid");

                    b.HasOne("API.Models.Showing", "showing")
                        .WithMany("seats")
                        .HasForeignKey("showingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("showing");
                });

            modelBuilder.Entity("API.Models.Booking", b =>
                {
                    b.Navigation("seats");
                });

            modelBuilder.Entity("API.Models.CinemaRoom", b =>
                {
                    b.Navigation("showings");
                });

            modelBuilder.Entity("API.Models.GuestBooking", b =>
                {
                    b.Navigation("seats");
                });

            modelBuilder.Entity("API.Models.Movie", b =>
                {
                    b.Navigation("showings");
                });

            modelBuilder.Entity("API.Models.Showing", b =>
                {
                    b.Navigation("bookings");

                    b.Navigation("seats");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
